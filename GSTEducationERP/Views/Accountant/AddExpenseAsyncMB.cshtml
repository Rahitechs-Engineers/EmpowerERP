@model GSTEducationERPLibrary.Accountant.Accountant

@using (Html.BeginForm("AddExpenseAsyncMB", "Accountant", FormMethod.Post, new { id = "AddExpenseView" }))
{
    @Html.AntiForgeryToken()

    <div class="card " style="padding:15px; margin-right:0px; margin-left:0px; margin-top:10px">
        <h4>Add Expense</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.ExpID, "Expense Category")
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ExpID, new SelectList(ViewBag.CourseList, "Value", "Text"), "Select", new { @id = "ExpenseCategory", @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.ExpID, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <br />

        @* This view start for Regular Reference Refund Other Advance Expense *@
        <div id="ExpenseView">

            <div class="row">

                <div  class="col-md-4">
                    @Html.LabelFor(model => model.ExpenseType, "Expense Type")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ExpenseType, new { htmlAttributes = new {@id= "ExpenseType", @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ExpenseType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="VendorName" class="col-md-4">
                    @Html.LabelFor(model => model.VendorName, "Vendor Name")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.VendorName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="RefundStudentName" class="col-md-4">
                    @Html.LabelFor(model => model.StudentName, "Student Name")
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.StudentName, new SelectList(ViewBag.RefundCandidatelst, "Value", "Text"), "Select", new { @id = "RefundCandidatelst", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="ReferenceByName" class="col-md-4">
                    @Html.LabelFor(model => model.ReferenceByName, "Reference By Name")
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ReferenceByName, new SelectList(ViewBag.ReferenceByStudentlst, "Value", "Text"), "Select", new { @id = "ReferenceByStudentlst", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ReferenceByName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="ReferenceToName" class="col-md-4">
                    @Html.LabelFor(model => model.ReferenceToName, "Reference To Name")
                    <div class="col-md-10">
                        <select class="form-control" id="ReferenceToStudents" name="ReferenceToStudents" >
                            <option value="">--Select -------</option>
                            <!-- This select element will be populated dynamically based on AJAX response -->
                        </select>
                        @Html.ValidationMessageFor(model => model.ReferenceToName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div  class="col-md-4">
                    @Html.LabelFor(model => model.PaymentMode, "Payment Mode")
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.PaymentMode, new SelectList(ViewBag.PaymentMode, "Value", "Text"), "Select", new { @id = "PaymentMode", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PaymentMode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <br />
            <div class="row">

                <div id="RefundPaidAmount" class="col-md-4">
                    @Html.LabelFor(model => model.PaidFee, "Paid Fee")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PaidFee, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PaidFee, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="Amount" class="col-md-4">
                    @Html.LabelFor(model => model.Amount, "Amount")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="PaymentDate" class="col-md-4">
                    @Html.LabelFor(model => model.Date, "Payment Date")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <br />
            <div id="TranscationId" class="row">

                <div id="TranscationId" class="col-md-4">
                    @Html.LabelFor(model => model.TranscationId, "TranscationId_Cheque No")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TranscationId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TranscationId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="ChequeDate" class="col-md-4">
                    @Html.LabelFor(model => model.ChequeDate, "Cheque Date")
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ChequeDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ChequeDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
            </div>
            <div class="row">


                <div class="col-md-4">
                    @Html.LabelFor(model => model.Comment, "Comment")
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <br />

            <div class="row">

                <div id="btnAddExpense" class="row">
                    <div class="col-md-4 ">
                        <div class="col-md-offset-2 col-md-10 ">
                            <input type="submit" value="AddExpense" class="btn btn-success btn-sm " id="AddExpense" />
                        </div>
                    </div>

                </div>

            </div>


        </div>
        @* This view end for Regular Reference Refund Other Advance Expense *@



    </div>
    <div class="row">
        <button class="close text-danger" data-dismiss="modal" style="position: absolute; top: 8px; right: 8px;">&times;</button>
        <a href="@Url.Action("ExpenseDashboardAsyncMB")" class="back-link">
            <video width="45" height="45" playsinline loop>
                <source src="~/Content/Admin/icon/Back.mp4" type="video/mp4" />
            </video>
        </a>
    </div>


}

<div>
    @Html.ActionLink("Back to List", "ExpenseDashboardAsyncMB")
</div>


<script src="~/Content/plugins/jquery/jquery.min.js" type="text/javascript"></script>
<script src="~/Content/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.3/dist/sweetalert2.all.min.js"></script>
@* <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>*@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<link rel="stylesheet" href="~/Content/plugins/toastr/toastr.min.css" />
<script src="~/Content/plugins/toastr/toastr.min.js"></script>

<!-- Bootstrap 4 -->

<script src="~/Content/plugins/moment/moment.min.js"></script>
<!-- Tempusdominus Bootstrap 4 -->
<script src="~/Content/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>
<script src="~/Content/plugins/daterangepicker/daterangepicker.js"></script>

<script>
    document.getElementById('AddExpenseView').addEventListener('submit', function (e) {
        
        e.preventDefault(); // Prevent the form from submitting immediately
       
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to Add Expens?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, submit it!'
        }).then((result) => {
            if (result.isConfirmed) {
                e.target.submit(); // Submit the form if the user confirms
            }
        });
    });
</script>





<script type="text/javascript">
    $(document).ready(function () {


        $("#ExpenseView").hide();
        $("#btnAddExpense").hide();

        $("#ExpenseCategory").change(function () {
            var selectedValue = $(this).val();

            if (selectedValue === "1") {
                $("#ExpenseView").show();
                $("#VendorName").show();
                $("#ReferenceToName").hide();
                $("#ReferenceByName").hide();
                $("#RefundStudentName").hide();
                $("#RefundPaidAmount").hide();
                $("#TranscationId").hide();
                $("#ChequeDate").hide();
                $("#btnAddExpense").show();
            } if (selectedValue === "2") {
                $("#ExpenseView").show();
                $("#ReferenceToName").hide();
                $("#ReferenceByName").hide();
                $("#RefundStudentName").show();
                $("#RefundPaidAmount").show();
                $("#TranscationId").hide();
                $("#ChequeDate").hide();
                $("#VendorName").hide();
                $("#btnAddExpense").show();
            } if (selectedValue === "3") {
                $("#ExpenseView").show();
                $("#ReferenceToName").show();
                $("#ReferenceByName").show();
                $("#RefundStudentName").hide();
                $("#RefundPaidAmount").hide();
                $("#TranscationId").hide();
                $("#ChequeDate").hide();
                $("#VendorName").hide();
                $("#btnAddExpense").show();
            } if (selectedValue === "5") {
                $("#ExpenseView").show();
                $("#ReferenceToName").show();
                $("#ReferenceByName").show();
                $("#RefundStudentName").hide();
                $("#RefundPaidAmount").hide();
                $("#TranscationId").hide();
                $("#ChequeDate").hide();
                $("#VendorName").hide();
                $("#btnAddExpense").show();
            }
        });

        $("#PaymentMode").change(function () {
            var SelectedText = $(this).val();

            if (SelectedText === "CASH") {
                $("#TranscationId").hide();
                $("#ChequeDate").hide();

            } if (SelectedText === "BANK") {
                $("#TranscationId").show();
                $("#ChequeDate").hide();

            } if (SelectedText === "CHEQUE") {
                $("#TranscationId").show();
                $("#ChequeDate").show();

            }



        });

        $('#ExpenseCategory').on('change', function (e) {
            var ExpCategory = $(this).val();

            $.ajax({
                url: "/Accountant/GetExpenceTypeAsynMB",
                type: 'GET',
                data: {
                    ExpCategoryId: ExpCategory
                },
                success: function (response) {
                    if (response.success) {
                        $('#ExpenseType').val(response.expenseType);
                    } else {
                        console.error("Error: Unable to fetch expense type.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX request failed: ", status, error);
                }
            });
        });

        $('#ReferenceByStudentlst').on('change', function (e) {
            var CandidateCode = $(this).val();
            $.ajax({
                url: "/Accountant/GettheReferenceToCandidateAsyncMB",
                type: 'GET',
                data: {
                    CandidateCode: CandidateCode
                },
                success: function (response) {
                    if (response.success) {
                        var selectElement = $('#ReferenceToStudents');
                        selectElement.empty(); // Clear existing options
                        selectElement.append('<option value="">--Select -------</option>'); // Add default option

                        $.each(response.candidates, function (index, item) {
                            selectElement.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                        });
                    } else {
                        console.error("Failed to fetch candidates.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX request failed: ", status, error);
                }
            });
        });

        

    });

</script>


